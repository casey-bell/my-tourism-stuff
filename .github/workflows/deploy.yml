name: Deploy to Production

on:
  push:
    branches:
      - main

permissions:
  contents: read        # allow reading repository contents
  pages: write          # required to deploy to GitHub Pages
  id-token: write       # required by some deployment actions

jobs:
  deployment:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .

      - name: Install test dependencies
        run: |
          pip install pytest xlsxwriter markdown-it-py

      - name: Run tests
        run: python -m pytest tests/

      - name: Build site
        shell: bash
        run: |
          set -euo pipefail

          echo 'Building deployment site...'
          mkdir -p site

          # Convert valid notebook files to HTML (skip non-JSON files)
          for notebook in notebooks/*.ipynb; do
            # Check if glob matched any files
            [ -e "$notebook" ] || continue
            if file "$notebook" | grep -q "JSON"; then
              jupyter nbconvert --to html --output-dir=site "$notebook" || echo "Warning: Failed to convert $notebook"
            else
              echo "Skipping non-JSON file: $notebook"
            fi
          done

          # Convert README to HTML for web viewing (use markdown-it-py)
          python - <<'PY'
import os

# Import MarkdownIt with a fallback for different package layouts
try:
    from markdown_it import MarkdownIt
except Exception:
    try:
        from markdown_it.main import MarkdownIt
    except Exception as e:
        # Avoid importing sys; report the error and exit explicitly.
        print("ERROR: Could not import MarkdownIt:", e)
        raise SystemExit(1)

md = MarkdownIt()

readme_path = os.path.join(os.getcwd(), "README.md")
if not os.path.isfile(readme_path):
    print("NOTICE: README.md not found, skipping index.html generation")
    raise SystemExit(0)

with open(readme_path, "r", encoding="utf-8") as f:
    md_content = f.read()

html_body = md.render(md_content)

html_content = """<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>My Tourism Stuff</title>
    <style>
        body { font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif;
               max-width: 980px; margin: 40px auto; padding: 0 20px; line-height: 1.6; }
        code { background: #f6f8fa; padding: 2px 6px; border-radius: 3px; }
        pre { background: #f6f8fa; padding: 16px; border-radius: 6px; overflow: auto; }
        h1, h2, h3 { border-bottom: 1px solid #eaecef; padding-bottom: 8px; }
        table { border-collapse: collapse; width: 100%; }
        th, td { border: 1px solid #dfe2e5; padding: 8px 12px; }
        th { background: #f6f8fa; }
    </style>
</head>
<body>
%s
</body>
</html>""" % html_body

with open(os.path.join("site", "index.html"), "w", encoding="utf-8") as f:
    f.write(html_content)
PY

          echo 'Build completed successfully'

      - name: Check build output
        run: |
          if [ ! -d "site" ] || [ -z "$(ls -A site)" ]; then
            echo "ERROR: Build failed - site directory is missing or empty"
            exit 1
          fi
          echo "Build verification passed - site directory exists and contains files"
          ls -la site/

      # Upload the generated site as a Pages artifact and then deploy using the official Pages deploy action.
      # This avoids constructing a push URL manually and prevents errors like "Malformed input to a URL function".
      - name: Upload site artifact for Pages
        uses: actions/upload-pages-artifact@v1
        with:
          path: site

      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v1
